{
    "path": "web/src/api/request.ts",
    "model_usage_metrics": {
        "Duration": 16922498640,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "web/src/api/request.test.ts",
    "existing_test_code": "",
    "original_code": "import { UIContextType } from '@/lib/ui.context';\nimport axios from 'axios'\n\n\nconst withAxios = (ui: UIContextType) =\u003e {\n  const service = axios.create({\n    //baseURL: `${process.env.NEXT_PUBLIC_API_SERVER}/rest/v1`,\n    baseURL: `/rest/v1`,\n    timeout: 60 * 1000,\n    responseType: 'json',\n    maxContentLength: 1024 * 1024,\n    maxRedirects: 0,\n    withCredentials: true\n  })\n\n  service.interceptors.request.use(\n    (config) =\u003e {\n      // Do something before request is sent\n      config.headers['Content-Type'] = 'application/json'\n\n      // const accessToken = s?.detail?.accessToken;\n      // if (accessToken) {\n      //   config.headers['Authorization'] = `Bearer ${accessToken}`\n      // }\n\n      return config\n    },\n    (error) =\u003e {\n      return Promise.reject(error)\n    }\n  )\n\n  service.interceptors.response.use(\n    (response) =\u003e {\n      return response.data\n    },\n    (error) =\u003e {\n      const errResp = error.response;\n      if (errResp) {\n        if (errResp.status === 401) {\n          //if (errResp.config.url.endsWith('/rest/signin')) {\n          //  console.log('用户名或密码有误')//TODO: ElMessage.error('用户名或密码有误')\n          //} else {\n          //  console.log('请登录')//ElMessage.error('请登录')\n          //}\n          \n          //const router = useRouter()\n          //router.push({ name: 'SignIn' })\n          //s.redirect();\n          return Promise.resolve(null);\n        }\n\n        const errData = errResp.data;\n        const desc = [];\n        if (errData.error) {\n          desc.push(errData.error);\n        }\n        if (errData.message) {\n          desc.push(errData.message);\n        }\n        const msg = desc.join(' ');        \n\n        ui.setError(msg);\n        return Promise.reject(msg);\n      }\n\n      return Promise.reject(error);\n    }\n  )\n\n  return service;\n};\n\nexport default withAxios;\n",
    "test_code": "import { UIContextType } from '@/lib/ui.context';\nimport axios from 'axios';\nimport withAxios from './request'; // Adjust the import path as necessary\n\n// Mocking the UIContextType for testing\nconst mockUIContext: UIContextType = {\n  setError: jest.fn(),\n};\n\ndescribe('withAxios', () =\u003e {\n  let axiosInstance: any;\n\n  beforeEach(() =\u003e {\n    axiosInstance = withAxios(mockUIContext);\n  });\n\n  /**\n   * Test case for a successful request\n   * It should return the response data when the request is successful.\n   */\n  it('should return response data on successful request', async () =\u003e {\n    // Mocking axios.get to return a successful response\n    jest.spyOn(axios, 'create').mockReturnValue({\n      interceptors: {\n        request: { use: jest.fn() },\n        response: { use: jest.fn() },\n      },\n      get: jest.fn().mockResolvedValue({ data: { message: 'Success' } }),\n    });\n\n    const response = await axiosInstance.get('/test');\n    expect(response).toEqual({ message: 'Success' });\n  });\n\n  /**\n   * Test case for handling 401 Unauthorized error\n   * It should resolve to null when a 401 error occurs.\n   */\n  it('should resolve to null on 401 Unauthorized error', async () =\u003e {\n    // Mocking axios.get to return a 401 error\n    jest.spyOn(axios, 'create').mockReturnValue({\n      interceptors: {\n        request: { use: jest.fn() },\n        response: { use: jest.fn() },\n      },\n      get: jest.fn().mockRejectedValue({\n        response: { status: 401 },\n      }),\n    });\n\n    const response = await axiosInstance.get('/test');\n    expect(response).toBeNull();\n  });\n\n  /**\n   * Test case for handling other errors\n   * It should call setError on the UI context with the error message.\n   */\n  it('should call setError on other errors', async () =\u003e {\n    const errorMessage = 'An error occurred';\n    // Mocking axios.get to return a different error\n    jest.spyOn(axios, 'create').mockReturnValue({\n      interceptors: {\n        request: { use: jest.fn() },\n        response: { use: jest.fn() },\n      },\n      get: jest.fn().mockRejectedValue({\n        response: { data: { error: 'Error', message: errorMessage } },\n      }),\n    });\n\n    await expect(axiosInstance.get('/test')).rejects.toThrow(errorMessage);\n    expect(mockUIContext.setError).toHaveBeenCalledWith('Error An error occurred');\n  });\n\n  /**\n   * Test case for handling errors without a response\n   * It should reject with the original error.\n   */\n  it('should reject with the original error if no response', async () =\u003e {\n    const originalError = new Error('Network Error');\n    // Mocking axios.get to return a network error\n    jest.spyOn(axios, 'create').mockReturnValue({\n      interceptors: {\n        request: { use: jest.fn() },\n        response: { use: jest.fn() },\n      },\n      get: jest.fn().mockRejectedValue(originalError),\n    });\n\n    await expect(axiosInstance.get('/test')).rejects.toThrow(originalError);\n  });\n\n  /**\n   * Test case for checking request headers\n   * It should set the Content-Type header to application/json.\n   */\n  it('should set Content-Type header to application/json', async () =\u003e {\n    const axiosMock = jest.spyOn(axios, 'create').mockReturnValue({\n      interceptors: {\n        request: {\n          use: (onFulfilled: Function) =\u003e {\n            const config = { headers: {} };\n            onFulfilled(config);\n            expect(config.headers['Content-Type']).toBe('application/json');\n          },\n        },\n        response: { use: jest.fn() },\n      },\n      get: jest.fn(),\n    });\n\n    axiosInstance.get('/test');\n    expect(axiosMock).toHaveBeenCalled();\n  });\n});\n",
    "amount_of_generated_test_cases": 6,
    "single_test_run_command": "npm test web/src/api/request.test.ts"
}