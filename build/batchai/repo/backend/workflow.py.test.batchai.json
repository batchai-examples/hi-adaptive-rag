{
    "path": "backend/workflow.py",
    "model_usage_metrics": {
        "Duration": 12579348972,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "backend/test_workflow.py",
    "existing_test_code": "",
    "original_code": "from langgraph.graph import END, StateGraph, START\n### from langchain_cohere import CohereEmbeddings\n\nfrom graph import GraphState,web_search, retrieve, grade_documents, generate, transform_query, route_question, decide_to_generate, grade_generation_v_documents_and_question\n\n\n\n    \n### Compile Graph ####################################################################################################\n\nworkflow = StateGraph(GraphState)\n\n# Define the nodes\nworkflow.add_node(\"web_search\", web_search)  # web search\nworkflow.add_node(\"retrieve\", retrieve)  # retrieve\nworkflow.add_node(\"grade_documents\", grade_documents)  # grade documents\nworkflow.add_node(\"generate\", generate)  # generatae\nworkflow.add_node(\"transform_query\", transform_query)  # transform_query\n\n# Build graph\nworkflow.add_conditional_edges(\n    START,\n    route_question,\n    {\n        \"web_search\": \"web_search\",\n        \"vectorstore\": \"retrieve\",\n    },\n)\nworkflow.add_edge(\"web_search\", \"generate\")\nworkflow.add_edge(\"retrieve\", \"grade_documents\")\nworkflow.add_conditional_edges(\n    \"grade_documents\",\n    decide_to_generate,\n    {\n        \"transform_query\": \"transform_query\",\n        \"generate\": \"generate\",\n    },\n)\nworkflow.add_edge(\"transform_query\", \"retrieve\")\nworkflow.add_conditional_edges(\n    \"generate\",\n    grade_generation_v_documents_and_question,\n    {\n        \"not supported\": \"generate\",\n        \"useful\": END,\n        \"not useful\": \"transform_query\",\n    },\n)\n",
    "test_code": "import pytest\nfrom langgraph.graph import END, StateGraph, START\nfrom graph import GraphState, web_search, retrieve, grade_documents, generate, transform_query, route_question, decide_to_generate, grade_generation_v_documents_and_question\n\n# Initialize the workflow for testing\nworkflow = StateGraph(GraphState)\n\n# Define the nodes for the workflow\nworkflow.add_node(\"web_search\", web_search)\nworkflow.add_node(\"retrieve\", retrieve)\nworkflow.add_node(\"grade_documents\", grade_documents)\nworkflow.add_node(\"generate\", generate)\nworkflow.add_node(\"transform_query\", transform_query)\n\n# Build graph for testing\nworkflow.add_conditional_edges(\n    START,\n    route_question,\n    {\n        \"web_search\": \"web_search\",\n        \"vectorstore\": \"retrieve\",\n    },\n)\nworkflow.add_edge(\"web_search\", \"generate\")\nworkflow.add_edge(\"retrieve\", \"grade_documents\")\nworkflow.add_conditional_edges(\n    \"grade_documents\",\n    decide_to_generate,\n    {\n        \"transform_query\": \"transform_query\",\n        \"generate\": \"generate\",\n    },\n)\nworkflow.add_edge(\"transform_query\", \"retrieve\")\nworkflow.add_conditional_edges(\n    \"generate\",\n    grade_generation_v_documents_and_question,\n    {\n        \"not supported\": \"generate\",\n        \"useful\": END,\n        \"not useful\": \"transform_query\",\n    },\n)\n\n@pytest.fixture\ndef setup_workflow():\n    \"\"\"Fixture to set up the workflow for testing.\"\"\"\n    return workflow\n\ndef test_workflow_initialization(setup_workflow):\n    \"\"\"Test the initialization of the workflow.\"\"\"\n    # Check if the workflow has been initialized correctly\n    assert setup_workflow is not None\n    assert len(setup_workflow.nodes) == 5  # We have 5 nodes added\n\ndef test_workflow_edges(setup_workflow):\n    \"\"\"Test the edges of the workflow.\"\"\"\n    # Check if the edges are correctly established\n    assert setup_workflow.has_edge(START, \"web_search\")\n    assert setup_workflow.has_edge(START, \"vectorstore\")\n    assert setup_workflow.has_edge(\"web_search\", \"generate\")\n    assert setup_workflow.has_edge(\"retrieve\", \"grade_documents\")\n    assert setup_workflow.has_edge(\"grade_documents\", \"transform_query\")\n    assert setup_workflow.has_edge(\"grade_documents\", \"generate\")\n    assert setup_workflow.has_edge(\"transform_query\", \"retrieve\")\n    assert setup_workflow.has_edge(\"generate\", \"not supported\")\n    assert setup_workflow.has_edge(\"generate\", \"useful\")\n    assert setup_workflow.has_edge(\"generate\", \"not useful\")\n\ndef test_route_question_edge(setup_workflow):\n    \"\"\"Test the routing question edge.\"\"\"\n    # Ensure that the route_question function is correctly routed\n    assert setup_workflow.has_edge(START, \"web_search\")\n    assert setup_workflow.has_edge(START, \"vectorstore\")\n\ndef test_decide_to_generate_edge(setup_workflow):\n    \"\"\"Test the decision-making edge for generation.\"\"\"\n    # Check if the decision to generate leads to the correct nodes\n    assert setup_workflow.has_edge(\"grade_documents\", \"transform_query\")\n    assert setup_workflow.has_edge(\"grade_documents\", \"generate\")\n\ndef test_generate_edge_conditions(setup_workflow):\n    \"\"\"Test the conditions for the generate edge.\"\"\"\n    # Check if the generate edge leads to the correct outcomes\n    assert setup_workflow.has_edge(\"generate\", \"not supported\")\n    assert setup_workflow.has_edge(\"generate\", \"useful\")\n    assert setup_workflow.has_edge(\"generate\", \"not useful\")\n\ndef test_workflow_end_state(setup_workflow):\n    \"\"\"Test the end state of the workflow.\"\"\"\n    # Ensure that the workflow can reach the END state\n    assert setup_workflow.has_edge(\"generate\", END)\n",
    "amount_of_generated_test_cases": 6,
    "single_test_run_command": "pytest backend/test_workflow.py"
}